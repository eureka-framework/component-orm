<?php

/*
 * Copyright (c) {{ comment.copyright }}
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace {{ class.namespace }}\Abstracts;

use Eureka\Component\Database\ConnectionFactory;
use {{ orm.namespace }}\RepositoryInterface;
use {{ orm.namespace }}\Traits;
use Eureka\Component\Validation\Entity\ValidatorEntityFactory;
use Eureka\Component\Validation\ValidatorFactoryInterface;
use {{ entity.namespace }}\{{ class.entity }};
use {{ repository.namespace }}\{{ class.repository }};
use Psr\Cache\CacheItemPoolInterface;
{{ mapper.uses }}

/**
 * Abstract {{ class.name }} mapper class.
 *
 * /!\ AUTO GENERATED FILE. DO NOT EDIT THIS FILE.
 * You can add your specific code in child class: {{ class.mapper }}
 *
 * @author {{ comment.author }}
 */
abstract class Abstract{{ class.mapper }}
{
    /** @use Traits\CacheAwareTrait<{{ class.repository }}, {{ class.entity }}> */
    use Traits\CacheAwareTrait;
    use Traits\ConnectionAwareTrait;
    /** @use Traits\EntityAwareTrait<{{ class.entity }}> */
    use Traits\EntityAwareTrait;
    /** @use Traits\MapperTrait<{{ class.repository }}, {{ class.entity }}> */
    use Traits\MapperTrait;
    use Traits\TableTrait;
    use Traits\ValidatorAwareTrait;

    /**
     * @param array<class-string, RepositoryInterface> $mappers
     */
    public function __construct(
        string $connectionName,
        ConnectionFactory $connectionFactory,
        ValidatorFactoryInterface|null $validatorFactory = null,
        ValidatorEntityFactory|null $validatorEntityFactory = null,
        array $mappers = [],
        CacheItemPoolInterface|null $cache = null,
        bool $enableCacheOnRead = false,
    ) {
        $this->setConnectionName($connectionName);
        $this->setConnectionFactory($connectionFactory);
        $this->setCache($cache);
        $this->setValidatorFactories($validatorFactory, $validatorEntityFactory);

        $this->addMappers($mappers);

        if ($enableCacheOnRead) {
            $this->enableCacheOnRead();
        }

        $this->initialize();
    }

    /**
     * Initialize mapper with proper values for mapped table.
     */
    protected function initialize(): void
    {
        $this->setEntityClass({{ class.entity }}::class);
        $this->setTable('{{ database.table }}');

        $this->initializeFields();
        $this->initializeMapping();
        $this->initializeValidatorConfig();
        $this->initializeJoinConfigs();
    }

    protected function initializeFields(): void
    {
        $this->setFields([
            {{ database.fields }}
        ]);

        $this->setPrimaryKeys([
            {{ database.keys }}
        ]);
    }

    protected function initializeMapping(): void
    {
        $this->setNamesMap([{{ database.map }}
        ]);
    }

    protected function initializeValidatorConfig(): void
    {
        $this->setValidatorConfig([{{ validator.config }}
        ]);
    }

    protected function initializeJoinConfigs(): void
    {
        $this->setJoinConfigs([{{ database.joins }}
        ]);
    }
}
